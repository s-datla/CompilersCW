/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Lexer.lex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\73\1\74\1\1\22\0\1\3\1\54\1\13"+
    "\1\4\1\56\1\51\1\53\1\14\1\57\1\60\1\44\1\42\1\61"+
    "\1\43\1\12\1\5\1\11\11\7\1\55\1\62\1\45\1\46\1\47"+
    "\1\63\1\64\32\6\1\65\1\15\1\66\1\50\1\10\1\71\1\17"+
    "\1\32\1\23\1\22\1\26\1\35\1\6\1\30\1\20\2\6\1\34"+
    "\1\16\1\21\1\33\1\36\1\27\1\31\1\25\1\24\1\41\1\37"+
    "\1\40\3\6\1\67\1\52\1\70\1\72\6\0\1\73\u1fa2\0\1\73"+
    "\1\73\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\6\1\10\1\11\1\12\1\13\20\5\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\2\46\1\47\3\1\3\50\1\0\1\51\1\0\2\5"+
    "\1\52\1\53\1\5\1\54\11\5\1\55\1\5\1\56"+
    "\6\5\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\10\66\2\0\2\5\1\100\4\5\1\101"+
    "\1\102\2\5\1\103\3\5\1\104\1\105\6\5\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\0"+
    "\1\116\1\5\1\117\1\120\1\121\1\122\1\123\1\124"+
    "\1\125\1\5\1\126\1\127\3\5\1\130\1\5\1\131"+
    "\2\5\1\132\1\133\1\134\1\135\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\267\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\267\0\u0225\0\u0262\0\267\0\267\0\267"+
    "\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a"+
    "\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632"+
    "\0\267\0\267\0\267\0\u066f\0\u06ac\0\267\0\267\0\267"+
    "\0\u06e9\0\u0726\0\u0763\0\u07a0\0\267\0\267\0\267\0\267"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\267\0\u07dd\0\u081a\0\267\0\267\0\u0857\0\u0894\0\u08d1"+
    "\0\u0131\0\u090e\0\267\0\u094b\0\u0262\0\u0225\0\u0988\0\u09c5"+
    "\0\u0a02\0\u01ab\0\u0a3f\0\u01ab\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u01ab\0\u0ca1\0\u01ab"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\267\0\267"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\267\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034"+
    "\0\u1071\0\u10ae\0\u10eb\0\u01ab\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u01ab\0\u01ab\0\u121c\0\u1259\0\u01ab\0\u1296\0\u12d3\0\u1310"+
    "\0\u01ab\0\u01ab\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\u14bb\0\u01ab\0\u14f8\0\u01ab\0\u01ab\0\u01ab\0\u01ab\0\u01ab"+
    "\0\u01ab\0\u01ab\0\u1535\0\u01ab\0\u01ab\0\u1572\0\u15af\0\u15ec"+
    "\0\u01ab\0\u1629\0\u01ab\0\u1666\0\u16a3\0\u01ab\0\u01ab\0\u01ab"+
    "\0\u01ab\0\u01ab";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\11\1\24\1\25\1\26\1\27\1\30\2\11\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\11"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\4\1\6\1\72\1\73\1\74\10\72\1\75"+
    "\1\72\1\76\57\72\1\77\1\73\1\74\11\77\1\4"+
    "\1\100\57\77\77\0\1\6\72\0\1\101\1\102\1\103"+
    "\72\101\4\0\1\104\76\0\4\11\4\0\24\11\42\0"+
    "\1\12\1\0\1\12\1\105\71\0\1\106\1\0\1\106"+
    "\1\105\71\0\1\105\1\0\1\105\71\0\4\11\4\0"+
    "\1\11\1\107\22\11\41\0\4\11\4\0\16\11\1\110"+
    "\5\11\41\0\4\11\4\0\3\11\1\111\13\11\1\112"+
    "\4\11\41\0\4\11\4\0\2\11\1\113\12\11\1\114"+
    "\6\11\41\0\4\11\4\0\12\11\1\115\11\11\41\0"+
    "\4\11\4\0\4\11\1\116\5\11\1\117\2\11\1\120"+
    "\6\11\41\0\4\11\4\0\10\11\1\121\13\11\41\0"+
    "\4\11\4\0\16\11\1\122\5\11\41\0\4\11\4\0"+
    "\1\11\1\123\6\11\1\124\13\11\41\0\4\11\4\0"+
    "\15\11\1\125\6\11\41\0\4\11\4\0\4\11\1\126"+
    "\17\11\41\0\4\11\4\0\10\11\1\127\13\11\41\0"+
    "\4\11\4\0\2\11\1\130\1\11\1\131\10\11\1\132"+
    "\1\133\5\11\41\0\4\11\4\0\13\11\1\134\10\11"+
    "\41\0\4\11\4\0\15\11\1\135\6\11\41\0\4\11"+
    "\4\0\12\11\1\136\11\11\101\0\1\137\74\0\1\140"+
    "\1\141\77\0\1\142\75\0\1\143\67\0\1\144\103\0"+
    "\1\145\17\0\1\72\2\0\10\72\1\0\1\72\1\0"+
    "\57\72\2\0\1\74\72\0\1\146\2\0\10\146\1\147"+
    "\1\150\1\151\3\146\1\152\2\146\1\153\4\146\1\154"+
    "\1\155\2\146\1\156\35\146\16\0\1\157\60\0\1\146"+
    "\2\0\10\146\1\160\1\161\1\162\3\146\1\163\2\146"+
    "\1\164\4\146\1\165\1\166\2\146\1\167\35\146\4\0"+
    "\1\103\72\0\4\170\1\171\70\170\6\0\4\11\4\0"+
    "\2\11\1\172\21\11\41\0\4\11\4\0\2\11\1\173"+
    "\21\11\41\0\4\11\4\0\6\11\1\174\15\11\41\0"+
    "\4\11\4\0\5\11\1\175\16\11\41\0\4\11\4\0"+
    "\1\11\1\176\22\11\41\0\4\11\4\0\10\11\1\177"+
    "\13\11\41\0\4\11\4\0\10\11\1\200\13\11\41\0"+
    "\4\11\4\0\20\11\1\201\3\11\41\0\4\11\4\0"+
    "\11\11\1\202\12\11\41\0\4\11\4\0\2\11\1\203"+
    "\4\11\1\204\14\11\41\0\4\11\4\0\6\11\1\205"+
    "\15\11\41\0\4\11\4\0\1\11\1\206\4\11\1\207"+
    "\15\11\41\0\4\11\4\0\15\11\1\210\6\11\41\0"+
    "\4\11\4\0\3\11\1\211\2\11\1\212\15\11\41\0"+
    "\4\11\4\0\10\11\1\213\13\11\41\0\4\11\4\0"+
    "\13\11\1\214\10\11\41\0\4\11\4\0\15\11\1\215"+
    "\6\11\41\0\4\11\4\0\2\11\1\216\21\11\41\0"+
    "\4\11\4\0\2\11\1\217\21\11\41\0\4\11\4\0"+
    "\2\11\1\220\21\11\47\0\1\221\74\0\1\222\74\0"+
    "\1\223\74\0\1\224\74\0\1\225\74\0\1\226\74\0"+
    "\1\227\74\0\1\230\60\0\4\170\1\231\70\170\4\0"+
    "\1\171\1\103\75\0\4\11\4\0\3\11\1\232\20\11"+
    "\41\0\4\11\4\0\1\11\1\233\22\11\41\0\4\11"+
    "\4\0\6\11\1\234\15\11\41\0\4\11\4\0\13\11"+
    "\1\235\10\11\41\0\4\11\4\0\17\11\1\236\4\11"+
    "\41\0\4\11\4\0\3\11\1\237\20\11\41\0\4\11"+
    "\4\0\17\11\1\240\4\11\41\0\4\11\4\0\10\11"+
    "\1\241\13\11\41\0\4\11\4\0\4\11\1\242\17\11"+
    "\41\0\4\11\4\0\23\11\1\243\41\0\4\11\4\0"+
    "\16\11\1\244\5\11\41\0\4\11\4\0\17\11\1\245"+
    "\4\11\41\0\4\11\4\0\1\11\1\246\22\11\41\0"+
    "\4\11\4\0\1\11\1\247\22\11\41\0\4\11\4\0"+
    "\3\11\1\250\20\11\41\0\4\11\4\0\4\11\1\251"+
    "\17\11\41\0\4\11\4\0\16\11\1\252\5\11\33\0"+
    "\4\170\1\231\1\103\67\170\6\0\4\11\4\0\7\11"+
    "\1\253\14\11\41\0\4\11\4\0\13\11\1\254\10\11"+
    "\41\0\4\11\4\0\16\11\1\255\5\11\41\0\4\11"+
    "\4\0\6\11\1\256\15\11\41\0\4\11\4\0\6\11"+
    "\1\257\15\11\41\0\4\11\4\0\10\11\1\260\13\11"+
    "\41\0\4\11\4\0\3\11\1\261\20\11\41\0\4\11"+
    "\4\0\16\11\1\262\5\11\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5856];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\4\1\1\11\2\1\3\11"+
    "\20\1\3\11\2\1\3\11\4\1\15\11\2\1\2\11"+
    "\5\1\1\11\1\0\1\1\1\0\30\1\21\11\10\1"+
    "\2\0\27\1\10\11\1\0\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer input = new StringBuffer();
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [188] { throw new Error(\"Illegal Character <\" + yytext() + \">\"); }");
            { throw new Error("Illegal Character <" + yytext() + ">");
            }
          case 95: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { /*\tDon\'t do anything */ }");
            { /*	Don't do anything */
            }
          case 96: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { return symbol(sym.SYM_HASH); }");
            { return symbol(sym.SYM_HASH);
            }
          case 97: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { return symbol(sym.SYM_FSLASH); }");
            { return symbol(sym.SYM_FSLASH);
            }
          case 98: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { return symbol(sym.IDENT,yytext()); }");
            { return symbol(sym.IDENT,yytext());
            }
          case 99: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { return symbol(sym.INT_LITERAL,new Integer(yytext())); }");
            { return symbol(sym.INT_LITERAL,new Integer(yytext()));
            }
          case 100: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return symbol(sym.SYM_USCORE); }");
            { return symbol(sym.SYM_USCORE);
            }
          case 101: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { return symbol(sym.SYM_PERIOD); }");
            { return symbol(sym.SYM_PERIOD);
            }
          case 102: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [53] { string.setLength(0); yybegin(STRING); }");
            { string.setLength(0); yybegin(STRING);
            }
          case 103: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [54] { yybegin(CHARLITERAL); }");
            { yybegin(CHARLITERAL);
            }
          case 104: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { return symbol(sym.SYM_BSLASH); }");
            { return symbol(sym.SYM_BSLASH);
            }
          case 105: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [90] { return symbol(sym.SYM_PLUS); }");
            { return symbol(sym.SYM_PLUS);
            }
          case 106: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { return symbol(sym.SYM_MINUS); }");
            { return symbol(sym.SYM_MINUS);
            }
          case 107: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { return symbol(sym.SYM_STAR); }");
            { return symbol(sym.SYM_STAR);
            }
          case 108: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [93] { return symbol(sym.SYM_LARROW); }");
            { return symbol(sym.SYM_LARROW);
            }
          case 109: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { return symbol(sym.SYM_EQUAL); }");
            { return symbol(sym.SYM_EQUAL);
            }
          case 110: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return symbol(sym.SYM_RARROW); }");
            { return symbol(sym.SYM_RARROW);
            }
          case 111: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [96] { return symbol(sym.SYM_CARET); }");
            { return symbol(sym.SYM_CARET);
            }
          case 112: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return symbol(sym.SYM_PRCNT); }");
            { return symbol(sym.SYM_PRCNT);
            }
          case 113: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return symbol(sym.SYM_PIPE); }");
            { return symbol(sym.SYM_PIPE);
            }
          case 114: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { return symbol(sym.SYM_AMP); }");
            { return symbol(sym.SYM_AMP);
            }
          case 115: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { return symbol(sym.SYM_EXCLPNT); }");
            { return symbol(sym.SYM_EXCLPNT);
            }
          case 116: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return symbol(sym.SYM_COLON); }");
            { return symbol(sym.SYM_COLON);
            }
          case 117: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { return symbol(sym.SYM_DOLLAR); }");
            { return symbol(sym.SYM_DOLLAR);
            }
          case 118: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [115] { return symbol(sym.SYM_LPAREN); }");
            { return symbol(sym.SYM_LPAREN);
            }
          case 119: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return symbol(sym.SYM_RPAREN); }");
            { return symbol(sym.SYM_RPAREN);
            }
          case 120: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { return symbol(sym.SYM_COMMA); }");
            { return symbol(sym.SYM_COMMA);
            }
          case 121: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return symbol(sym.SYM_SEMI); }");
            { return symbol(sym.SYM_SEMI);
            }
          case 122: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { return symbol(sym.SYM_QSTN); }");
            { return symbol(sym.SYM_QSTN);
            }
          case 123: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { return symbol(sym.SYM_AT); }");
            { return symbol(sym.SYM_AT);
            }
          case 124: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return symbol(sym.SYM_LSQR); }");
            { return symbol(sym.SYM_LSQR);
            }
          case 125: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return symbol(sym.SYM_RSQR); }");
            { return symbol(sym.SYM_RSQR);
            }
          case 126: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return symbol(sym.SYM_LCRL); }");
            { return symbol(sym.SYM_LCRL);
            }
          case 127: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return symbol(sym.SYM_RCRL); }");
            { return symbol(sym.SYM_RCRL);
            }
          case 128: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return symbol(sym.SYM_GRAVE); }");
            { return symbol(sym.SYM_GRAVE);
            }
          case 129: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return symbol(sym.SYM_TILDE); }");
            { return symbol(sym.SYM_TILDE);
            }
          case 130: break;
          case 37: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { string.append(yytext()); }");
            { string.append(yytext());
            }
          case 131: break;
          case 38: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { throw new RunTimeException(\"Illegal Termination of String\"); }");
            { throw new RunTimeException("Illegal Termination of String");
            }
          case 132: break;
          case 39: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [150] { yybegin(YYINITIAL);"+ZZ_NL+"\t\t\t\t\t\t\treturn symbol(sym.STRING_LITERAL,"+ZZ_NL+"\t\t\t\t\t\t\tstring.toString()); }");
            { yybegin(YYINITIAL);
							return symbol(sym.STRING_LITERAL,
							string.toString());
            }
          case 133: break;
          case 40: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { /* Don\'t do anything */ }");
            { /* Don't do anything */
            }
          case 134: break;
          case 41: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [143] { return symbol(sym.FLOAT_LITERAL,new Float(yytext().substring(0,yylength()-1))); }");
            { return symbol(sym.FLOAT_LITERAL,new Float(yytext().substring(0,yylength()-1)));
            }
          case 135: break;
          case 42: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [67] { return symbol(sym.IN); }");
            { return symbol(sym.IN);
            }
          case 136: break;
          case 43: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return symbol(sym.IFEL); }");
            { return symbol(sym.IFEL);
            }
          case 137: break;
          case 44: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [82] { return symbol(sym.DO); }");
            { return symbol(sym.DO);
            }
          case 138: break;
          case 45: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [83] { return symbol(sym.OD); }");
            { return symbol(sym.OD);
            }
          case 139: break;
          case 46: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return symbol(sym.FI); }");
            { return symbol(sym.FI);
            }
          case 140: break;
          case 47: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [98] { return symbol(sym.LEQ); }");
            { return symbol(sym.LEQ);
            }
          case 141: break;
          case 48: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [105] { return symbol(sym.EQEQ); }");
            { return symbol(sym.EQEQ);
            }
          case 142: break;
          case 49: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [99] { return symbol(sym.GEQ); }");
            { return symbol(sym.GEQ);
            }
          case 143: break;
          case 50: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { return symbol(sym.SYM_OR); }");
            { return symbol(sym.SYM_OR);
            }
          case 144: break;
          case 51: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { return symbol(sym.SYM_AND); }");
            { return symbol(sym.SYM_AND);
            }
          case 145: break;
          case 52: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [106] { return symbol(sym.NOTEQ); }");
            { return symbol(sym.NOTEQ);
            }
          case 146: break;
          case 53: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [107] { return symbol(sym.CONCAT); }");
            { return symbol(sym.CONCAT);
            }
          case 147: break;
          case 54: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { throw new RunTimeException(\"Illegal Escape Sequence \\\"\"+yytext()+\"\\\"\"); }");
            { throw new RunTimeException("Illegal Escape Sequence \""+yytext()+"\"");
            }
          case 148: break;
          case 55: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [159] { string.append(\'\\\"\'); }");
            { string.append('\"');
            }
          case 149: break;
          case 56: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [160] { string.append(\'\\\'\'); }");
            { string.append('\'');
            }
          case 150: break;
          case 57: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [161] { string.append(\'\\\\\'); }");
            { string.append('\\');
            }
          case 151: break;
          case 58: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [157] { string.append(\'\\n\'); }");
            { string.append('\n');
            }
          case 152: break;
          case 59: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { string.append(\'\\t\'); }");
            { string.append('\t');
            }
          case 153: break;
          case 60: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [158] { string.append(\'\\r\'); }");
            { string.append('\r');
            }
          case 154: break;
          case 61: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { string.append(\'\\b\'); }");
            { string.append('\b');
            }
          case 155: break;
          case 62: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { string.append(\'\\f\'); }");
            { string.append('\f');
            }
          case 156: break;
          case 63: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [171] { yybegin(YYINITIAL);return symbol(CHAR_LITERAL,yytext().charAt(0)); }");
            { yybegin(YYINITIAL);return symbol(CHAR_LITERAL,yytext().charAt(0));
            }
          case 157: break;
          case 64: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [63] { return symbol(sym.INT); }");
            { return symbol(sym.INT);
            }
          case 158: break;
          case 65: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [66] { return symbol(sym.TOP); }");
            { return symbol(sym.TOP);
            }
          case 159: break;
          case 66: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [60] { return symbol(sym.SEQ); }");
            { return symbol(sym.SEQ);
            }
          case 160: break;
          case 67: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { return symbol(sym.RAT); }");
            { return symbol(sym.RAT);
            }
          case 161: break;
          case 68: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [68] { return symbol(sym.LEN); }");
            { return symbol(sym.LEN);
            }
          case 162: break;
          case 69: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { return symbol(sym.LET); }");
            { return symbol(sym.LET);
            }
          case 163: break;
          case 70: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [177] { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, \'\\\"\'); }");
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\"');
            }
          case 164: break;
          case 71: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [178] { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, \'\\\'\'); }");
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\'');
            }
          case 165: break;
          case 72: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [179] { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, \'\\\\\'); }");
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\\');
            }
          case 166: break;
          case 73: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [175] { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, \'\\n\'); }");
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\n');
            }
          case 167: break;
          case 74: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [174] { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, \'\\t\'); }");
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\t');
            }
          case 168: break;
          case 75: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [176] { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, \'\\r\'); }");
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\r');
            }
          case 169: break;
          case 76: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, \'\\b\'); }");
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\b');
            }
          case 170: break;
          case 77: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [173] { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, \'\\f\'); }");
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\f');
            }
          case 171: break;
          case 78: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [58] { return symbol(sym.MAIN); }");
            { return symbol(sym.MAIN);
            }
          case 172: break;
          case 79: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [59] { return symbol(sym.DICT); }");
            { return symbol(sym.DICT);
            }
          case 173: break;
          case 80: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [61] { return symbol(sym.CHAR); }");
            { return symbol(sym.CHAR);
            }
          case 174: break;
          case 81: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [69] { return symbol(sym.TDEF); }");
            { return symbol(sym.TDEF);
            }
          case 175: break;
          case 82: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return symbol(sym.THEN); }");
            { return symbol(sym.THEN);
            }
          case 176: break;
          case 83: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return symbol(sym.ELIF); }");
            { return symbol(sym.ELIF);
            }
          case 177: break;
          case 84: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return symbol(sym.ELSE); }");
            { return symbol(sym.ELSE);
            }
          case 178: break;
          case 85: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return symbol(sym.READ); }");
            { return symbol(sym.READ);
            }
          case 179: break;
          case 86: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [62] { return symbol(sym.BOOL); }");
            { return symbol(sym.BOOL);
            }
          case 180: break;
          case 87: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] { return symbol(sym.FDEF); }");
            { return symbol(sym.FDEF);
            }
          case 181: break;
          case 88: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [72] { return symbol(sym.VOID); }");
            { return symbol(sym.VOID);
            }
          case 182: break;
          case 89: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { return symbol(sym.ALIAS); }");
            { return symbol(sym.ALIAS);
            }
          case 183: break;
          case 90: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [65] { return symbol(sym.FLOAT); }");
            { return symbol(sym.FLOAT);
            }
          case 184: break;
          case 91: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return symbol(sym.PRINT); }");
            { return symbol(sym.PRINT);
            }
          case 185: break;
          case 92: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return symbol(sym.WHILE); }");
            { return symbol(sym.WHILE);
            }
          case 186: break;
          case 93: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { return symbol(sym.RETURN); }");
            { return symbol(sym.RETURN);
            }
          case 187: break;
          case 94: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return symbol(sym.FORALL); }");
            { return symbol(sym.FORALL);
            }
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
