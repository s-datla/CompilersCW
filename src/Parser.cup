import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};
parser code {:
  private boolean debug = true;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}
  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;
    public int counter;
    private Object value;
    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }
    public void addChild(Node n){ children.add(n); }
    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }
  private Lexer lexer;
  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }
  public void syntax_error(Symbol current_token) { report_error(
         "Syntax error at line " + (current_token.left+1) + ", column "
  + current_token.right, null );
  } 
:};

/* Terminals (Returned By Lexer). -----------------------*/

// Math Operators

terminal SYM_PLUS, SYM_MINUS, SYM_STAR, SYM_DIV, SYM_BSLASH, SYM_EQUAL, SYM_LARROW, SYM_RARROW, SYM_CARET, SYM_PRCNT, LEQ, GEQ;

// Logical Operators

terminal SYM_OR, SYM_AND, EQEQ, NOTEQ, SYM_CONCAT;

// Punctuation 

terminal SYM_EXCLPNT, SYM_HASH, SYM_DOLLAR, SYM_AMP, SYM_LPAREN, SYM_RPAREN, SYM_COMMA, SYM_PERIOD, SYM_COLON, SYM_SEMI, SYM_QSTN, SYM_AT, SYM_LSQR, SYM_RSQR, SYM_LCRL, SYM_RCRL, SYM_BLASH, SYM_USCORE, SYM_GRAVE, SYM_TILDE, SYM_PIPE;

// TYPES 

terminal MAIN, DICT, SEQ, CHAR, BOOL, INT, RAT, FLOAT;


// Flow Control

terminal IF, THEN, ELSE, ELIF, WHILE, FORALL, DO, RETURN;

// Literals

terminal IDENT, CHAR_LITERAL, INT_LITERAL, STRING_LITERAL, BOOL_LITERAL;

//OTHER

terminal TOP, IN, LEN, TDEF, FDEF, ALIAS, VOID, READ, PRINT, FI, OD;


/* Non terminals --------------------------------------*/

nonterminal statements, statement, top_level; 

nonterminal type_name, aggr_type, prim_type, aggr_possible_type, signed_int, unsigned_int, FLOAT_LITERAL, RAT_LITERAL;

nonterminal dict_decl, dict_literal, dict_comma_seperation, element_accsr;

nonterminal seq_decl, seq_comma_seperated, seq_literal, seq_splicing, len_expr, in_expr;

nonterminal tdef_decl, fdef_decl, declaration_list, alias_decl;

nonterminal assignment, io_calls, accessor, function_call, if_else, while_do, for_all, block, stat, stat_part, stat_list, declarations, decl_list, return;

nonterminal decl, simple_exp, return_exp, aggr_literal, literal, operations;

/* Precedences ----------------------*/

precedence left SYM_PLUS, SYM_MINUS, SYM_AND, SYM_OR, SYM_LPAREN, SYM_RPAREN, SYM_LSQR , SYM_RSQR, SYM_PRCNT;
precedence left SYM_STAR, SYM_DIV;
precedence right SYM_CARET;
precedence nonassoc NOTEQ, GEQ, LEQ, EQEQ, SYM_LARROW, SYM_RARROW, SYM_EQUAL, SYM_CONCAT; 



/* The grammar ----------------------*/

// High level ---------------------------------------------------
start with top_level; 

top_level ::= statements:ss {:
                if(debug()) System.out.println((Node)ss);
              :}
            ;

statements ::= statements:ss statement:s {:
                  Node n = (Node)ss;
                  n.addChild((Node)s);
                  RESULT = n;
               :}
             | /* empty */ {:
                  RESULT = new Node("Statements");
               :}
             ;

statement ::=  simple_exp:s SYM_SEMI statement {:
                RESULT = Node(s);
              :}
          | //Empty Set
          ;


//  Type definitions --------------------------------------------

type_name ::= aggr_type | prim_type
          ; 

aggr_type ::= dict_decl:i {: RESULT = new Node(i); :}
          | seq_decl :i {: RESULT = new Node(i); :}
          ;

prim_type ::= BOOL:i {: RESULT = new Node(i); :}
          | CHAR:i {: RESULT = new Node(i); :}
          | FLOAT:i {: RESULT = new Node(i); :}
          | INT:i {: RESULT = new Node(i); :}
          | RAT:i {: RESULT = new Node(i); :}
          ;

aggr_possible_type  ::= type_name 
                    | TOP
                    | IDENT 
                    ;

// Float + Rational handling 
signed_int ::= SYM_MINUS:m INT_LITERAL;
unsigned_int ::= INT_LITERAL;
FLOAT_LITERAL ::= signed_int:i1 SYM_PERIOD:p unsigned_int:i2
              | unsigned_int:i1 SYM_PERIOD:p unsigned_int:i2
              ;
RAT_LITERAL ::= signed_int:i1 SYM_USCORE:u unsigned_int:i2 SYM_DIV:d unsigned_int:i3
            | unsigned_int:i1 SYM_USCORE:u unsigned_int:i2 SYM_DIV:d unsigned_int:i3
            ;

// Dictionary ---------------------------------------------------

dict_decl ::= DICT SYM_LARROW aggr_possible_type SYM_COMMA aggr_possible_type SYM_RARROW
          ; 

dict_literal  ::= SYM_LCRL SYM_RCRL
              | SYM_LCRL dict_comma_seperation SYM_RCRL
              ;

dict_comma_seperation ::= return_exp SYM_COLON return_exp
                      | dict_comma_seperation SYM_COMMA dict_comma_seperation
                      ;

element_accsr ::= IDENT SYM_LSQR return_exp SYM_RSQR
              ;

// Sequences ----------------------------------------------------

seq_decl ::= SEQ SYM_LARROW aggr_possible_type SYM_RARROW;

seq_comma_seperated ::= return_exp SYM_COMMA seq_comma_seperated
                    | return_exp 
                    | /*empty sequence*/
                    ;

seq_literal ::= SYM_LSQR seq_comma_seperated SYM_RSQR 
            | SYM_LSQR SYM_RSQR 
            ; 

seq_splicing  ::= IDENT SYM_LSQR return_exp SYM_COLON return_exp SYM_RSQR 
              | IDENT SYM_LSQR SYM_COLON return_exp SYM_RSQR 
              | IDENT SYM_LSQR return_exp SYM_COLON SYM_RSQR 
              ;

len_expr ::= LEN SYM_LPAREN IDENT SYM_RPAREN
         | LEN SYM_LPAREN seq_literal SYM_RPAREN
         | LEN SYM_LPAREN dict_literal SYM_RPAREN 
         ;

in_expr ::= literal IN IDENT
        | literal IN seq_decl 
        | literal IN dict_decl
        ;

// Typedef Declarations -----------------------------------------

tdef_decl ::= TDEF IDENT SYM_LCRL declaration_list SYM_RCRL;

fdef_decl ::= FDEF type_name IDENT SYM_LPAREN declaration_list SYM_RPAREN SYM_LCRL statement SYM_RCRL
          | FDEF VOID IDENT SYM_LPAREN declaration_list SYM_RPAREN SYM_LCRL statement SYM_RCRL
          ;

declaration_list  ::= type_name IDENT 
                  | type_name IDENT SYM_COMMA declaration_list
                  ;

alias_decl  ::= ALIAS IDENT IDENT;


// Statements ---------------------------------------------------

assignment  ::= decl SYM_EQUAL return_exp 
            | IDENT SYM_EQUAL return_exp
            ;

io_calls  ::= READ accessor
          | PRINT return_exp
          ;

accessor  ::= IDENT
          | accessor SYM_PERIOD IDENT
          ;

function_call ::= IDENT SYM_LPAREN declaration_list SYM_RPAREN;

if_else ::= IF SYM_LPAREN return_exp SYM_RPAREN THEN block ELSE block FI
        | IF SYM_LPAREN return_exp SYM_RPAREN THEN block FI
        | IF SYM_LPAREN return_exp SYM_RPAREN THEN block ELIF SYM_LPAREN return_exp SYM_RPAREN THEN block ELSE block FI
        ;

while_do ::= WHILE SYM_LPAREN return_exp SYM_RPAREN DO block OD
        ;

for_all ::= FORALL SYM_LPAREN return_exp IN aggr_literal SYM_RPAREN DO block OD;

block ::= stat_list 
      | decl_list
      | decl_list stat_list
      ;

stat  ::= function_call
      | io_calls
      | return
      | assignment
      ;

stat_part ::= stat SYM_SEMI
          | if_else
          | while_do
          | for_all
          ;

stat_list ::= stat_list stat_part
          | stat_list
          ;

declarations  ::= alias_decl
              | tdef_decl
              | fdef_decl
              | assignment
              ;

decl_list ::= declarations
          | decl_list declarations
          ;

return  ::= RETURN return_exp
        | RETURN
        ;

// Expressions --------------------------------------------------

decl ::= type_name IDENT | IDENT IDENT;

simple_exp ::= return_exp | assignment;

return_exp  ::= IDENT
            | return_exp operations return_exp
            | SYM_EXCLPNT return_exp // does this work? 
            | literal 
            ;

aggr_literal ::= dict_literal | seq_literal;

literal ::= BOOL_LITERAL
        | CHAR_LITERAL
        | dict_literal
        | FLOAT_LITERAL
        | RAT_LITERAL          
        | seq_literal
        | signed_int
        | STRING_LITERAL
        | unsigned_int
        ;

operations ::= SYM_PLUS       {: RESULT = new Node("+"); :}
           | SYM_MINUS      {: RESULT = new Node("-"); :}
           | SYM_STAR       {: RESULT = new Node("*"); :}
           | SYM_DIV        {: RESULT = new Node("/"); :}
           | SYM_CARET      {: RESULT = new Node("^"); :}
           | SYM_LARROW     {: RESULT = new Node("<"); :}
           | SYM_RARROW     {: RESULT = new Node(">"); :}
           | SYM_AND        {: RESULT = new Node("&&"); :}
           | SYM_OR         {: RESULT = new Node("||"); :}
           | EQEQ           {: RESULT = new Node("=="); :}
           | NOTEQ          {: RESULT = new Node("!="); :}
           | LEQ            {: RESULT = new Node("<="); :}
           | GEQ            {: RESULT = new Node(">="); :}
           | SYM_CONCAT     {: RESULT = new Node("::"); :}
           ;