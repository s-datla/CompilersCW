import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};
parser code {:
  public boolean syntaxErrors = false;

  private Lexer lexer;
  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  } 

  public void syntax_error(Symbol current_token) {
    this.syntaxErrors = true;
    report_error("Syntax error at line " + (current_token.left+1) + ", column " + current_token.right + "\n", null);
  }

:};

/* Terminals (Returned By Lexer). -----------------------*/

// Math Operators

terminal SYM_PLUS, SYM_MINUS, SYM_STAR, SYM_DIV, SYM_EQUAL, SYM_LARROW, SYM_RARROW, SYM_CARET, LEQ, GEQ;

// Logical Operators

terminal SYM_OR, SYM_AND, EQEQ, NOTEQ, CONCAT;

// Punctuation 

terminal SYM_EXCLPNT, SYM_LPAREN, SYM_RPAREN, SYM_COMMA, SYM_PERIOD, SYM_COLON, SYM_SEMI, SYM_LSQR, SYM_RSQR, SYM_LCRL, SYM_RCRL, SYM_USCORE;


// TYPES 

terminal MAIN, DICT, SEQ, CHAR, BOOL, INT, RAT, FLOAT;


// Flow Control

terminal IF, THEN, ELSE, ELIF, WHILE, FORALL, DO, RETURN;

// Literals

terminal IDENT, CHAR_LITERAL, INT_LITERAL, STRING_LITERAL, BOOL_LITERAL;

//OTHER

terminal TOP, IN, LEN, TDEF, FDEF, ALIAS, VOID, READ, PRINT, FI, OD;


/* Non terminals --------------------------------------*/
nonterminal program, main_func, program_content, exp;
nonterminal statement, print_decl, read_decl, logic_decl, func_call; 

nonterminal  assign_decl, type_decl, func_decl, alias_decl; 

nonterminal  number, sub_ident, len_decl, list, simple_exp; 

nonterminal ident_list, ident_list_set , ident_syn;

nonterminal splice_syn, splice_syn_set, bin_op, conditionals; 

nonterminal integer, float, rat, type_def , prim_type, aggr_type; 

nonterminal condition, concat_decl, cons_decl, cons_list_syntax, cons_list_seg, concat_list_syntax, conditions, declaration_list; 

nonterminal declaration_list_syntax, declaration_list_seg;

nonterminal list_container, seq_list, seq_decl, dict_list, dict_list_syntax, dict_list_seg, for_all, if_decl, else_if_decl, else_decl, while, list_decl, dict_decl;

nonterminal main_statements, statements;

nonterminal return_decl;

precedence left SYM_PERIOD, IN, SYM_COLON, SYM_AND, SYM_OR, CONCAT;

precedence left SYM_CARET, SYM_DIV, SYM_STAR, SYM_PLUS, SYM_MINUS;

precedence left SYM_LPAREN, SYM_RPAREN;

start with program;

program ::= main_func
        | main_func program_content
        | program_content main_func
        | program_content main_func program_content
        ;
// program_content is anything outside main{}
program_content ::= program_content exp
                | exp
                ;
statement ::= exp
          | print_decl
          | read_decl
          | logic_decl
          | RETURN SYM_SEMI
          | RETURN exp SYM_SEMI
          | func_call SYM_SEMI
          ;


main_statements ::= statements statement ;


statements ::= statements statement | ; 

exp ::= assign_decl SYM_SEMI
      | type_decl SYM_SEMI
      | func_decl SYM_SEMI
      | alias_decl SYM_SEMI
      ;


main_func ::= MAIN SYM_LCRL main_statements SYM_RCRL SYM_SEMI;

func_decl ::= FDEF return_decl IDENT SYM_LPAREN declaration_list SYM_RPAREN SYM_LCRL statements SYM_RCRL; 

integer ::= INT_LITERAL | SYM_MINUS INT_LITERAL;

float ::= INT_LITERAL SYM_PERIOD INT_LITERAL 
      | SYM_MINUS INT_LITERAL SYM_PERIOD INT_LITERAL 
      ;

rat ::= INT_LITERAL SYM_DIV INT_LITERAL 
      | INT_LITERAL SYM_USCORE INT_LITERAL SYM_DIV INT_LITERAL;

number ::= rat
        | float
        | integer
        ;


simple_exp ::= number
          | CHAR_LITERAL
          | STRING_LITERAL 
          | sub_ident
          | simple_exp bin_op simple_exp
          | SYM_LPAREN simple_exp SYM_RPAREN 
          | SYM_EXCLPNT simple_exp 
          | BOOL_LITERAL
          | len_decl
          | func_call 
          | simple_exp IN list
          | simple_exp IN SYM_LPAREN list SYM_RPAREN
          ;

func_call ::= sub_ident SYM_LPAREN cons_decl SYM_LPAREN;

list_decl ::= seq_decl 
          | dict_decl
          ;

list ::= concat_decl;

sub_ident ::= IDENT ident_list; 

ident_list ::= ident_list_set | ; 

ident_list_set ::= ident_list_set ident_syn | ident_syn ; 

ident_syn ::= SYM_PERIOD IDENT | splice_syn ;

splice_syn ::= SYM_LSQR splice_syn_set SYM_RSQR; 

splice_syn_set ::= simple_exp SYM_COLON simple_exp;

len_decl ::= LEN SYM_LPAREN simple_exp SYM_RPAREN;

bin_op ::= SYM_PLUS
        | SYM_MINUS
        | SYM_STAR
        | SYM_DIV
        | SYM_CARET
        | CONCAT
        ;

conditionals ::= EQEQ
             | SYM_LARROW
             | SYM_RARROW 
             | GEQ
             | LEQ
             | NOTEQ
             | SYM_AND
             | SYM_OR
             ;



type_def ::= prim_type
          | aggr_type 
          | TOP
          ;

prim_type ::= INT
          | BOOL
          | CHAR 
          | RAT 
          | FLOAT
          ;

// so many levels of bruteforce -_- 
aggr_type ::= SEQ SYM_LARROW type_def SYM_RARROW 
          | SEQ SYM_LARROW sub_ident SYM_RARROW 
          | DICT SYM_LARROW type_def SYM_COMMA type_def SYM_RARROW 
          | DICT SYM_LARROW sub_ident SYM_COMMA type_def SYM_RARROW 
          |  DICT SYM_LARROW type_def SYM_COMMA sub_ident SYM_RARROW 
          | DICT SYM_LARROW sub_ident SYM_COMMA sub_ident SYM_RARROW 
          ;

condition ::= simple_exp conditionals simple_exp ;

assign_decl ::= prim_type sub_ident SYM_EQUAL simple_exp
            | sub_ident SYM_EQUAL simple_exp 
            | sub_ident SYM_EQUAL condition
            | sub_ident SYM_EQUAL sub_ident SYM_EQUAL sub_ident CONCAT concat_decl
            | sub_ident SYM_EQUAL sub_ident CONCAT concat_decl 
            | sub_ident sub_ident SYM_EQUAL condition 
            | prim_type sub_ident SYM_EQUAL condition 
            | sub_ident sub_ident 
            | prim_type sub_ident 
            | SEQ SYM_LARROW type_def SYM_RARROW sub_ident SYM_EQUAL STRING_LITERAL
            | SEQ SYM_LARROW sub_ident SYM_RARROW sub_ident SYM_EQUAL STRING_LITERAL
            | SEQ SYM_LARROW sub_ident SYM_RARROW concat_decl 
            | SEQ SYM_LARROW type_def SYM_RARROW sub_ident SYM_EQUAL concat_decl 
            | DICT SYM_LARROW type_def SYM_COMMA type_def SYM_RARROW sub_ident SYM_EQUAL dict_list
            | DICT SYM_LARROW sub_ident SYM_COMMA sub_ident SYM_RARROW sub_ident SYM_EQUAL dict_list 
            | DICT SYM_LARROW type_def SYM_COMMA sub_ident SYM_RARROW sub_ident SYM_EQUAL dict_list
            | DICT SYM_LARROW sub_ident SYM_COMMA type_def SYM_RARROW sub_ident SYM_EQUAL dict_list
            | sub_ident sub_ident SYM_EQUAL cons_decl
            ;


cons_decl ::= cons_list_syntax | ; 

cons_list_syntax ::= cons_list_seg SYM_COMMA cons_list_syntax 
                  | cons_list_seg
                  ;

cons_list_seg ::= simple_exp
              | list_decl
              ;

concat_decl ::= concat_list_syntax CONCAT concat_decl 
            | concat_list_syntax ;

concat_list_syntax ::= func_call 
                   | sub_ident 
                   | seq_decl
                   ;

conditions ::= condition
            | condition SYM_OR conditions
            | condition SYM_AND conditions
            | sub_ident 
            | SYM_EXCLPNT sub_ident
            | prim_type
            | BOOL_LITERAL
            | len_decl
            | func_call 
            | simple_exp IN list
            | simple_exp IN SYM_LPAREN list SYM_RPAREN
            ;

declaration_list ::= declaration_list_syntax | ;


declaration_list_syntax ::= declaration_list_seg SYM_COMMA declaration_list_syntax |
declaration_list_seg ;

declaration_list_seg ::= prim_type sub_ident
                      | aggr_type sub_ident
                      | sub_ident sub_ident
                      ;

list_container ::= simple_exp 
               | seq_decl
               | dict_decl
               ;

seq_list ::= list_container SYM_COMMA seq_list
            ;

seq_decl ::= SYM_LSQR seq_list SYM_RSQR
        | SYM_LPAREN SYM_LSQR seq_list SYM_RSQR SYM_RPAREN
        | SYM_LPAREN SYM_RPAREN
        ;

dict_list ::= SYM_LCRL dict_list_syntax SYM_RCRL
        | list_container
        | SYM_LCRL SYM_RCRL 
        ;

dict_list_syntax ::=  dict_list_seg SYM_COMMA dict_list_syntax | dict_list_seg ;

dict_list_seg ::= dict_list_seg SYM_COLON dict_list_seg;

dict_decl ::= SYM_LCRL dict_list SYM_RCRL
          | SYM_LPAREN SYM_LSQR dict_list SYM_RSQR SYM_RPAREN
          ;

type_decl ::= TDEF sub_ident SYM_LCRL declaration_list SYM_RCRL; 

//Control loops! 

logic_decl ::= for_all |
if_decl | while ;

for_all ::= FORALL SYM_LPAREN sub_ident IN sub_ident SYM_RPAREN DO statements OD; 

if_decl ::= IF SYM_LPAREN conditions SYM_RPAREN THEN statements else_if_decl else_decl FI;

else_if_decl ::= ELIF SYM_LPAREN conditions THEN 
statements else_if_decl
| ;

else_decl ::= ELSE statements | ;

while ::= WHILE SYM_LPAREN conditions SYM_RPAREN DO statements OD; 

alias_decl ::= ALIAS type_def sub_ident 
            | ALIAS sub_ident sub_ident 
            ;

read_decl ::= READ sub_ident; 

print_decl ::= PRINT simple_exp;

return_decl ::= prim_type 
            | aggr_type
            | VOID
            ;










